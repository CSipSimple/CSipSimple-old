Index: pjsip/sources/pjmedia/include/pjmedia/format.h
===================================================================
--- pjsip.orig/sources/pjmedia/include/pjmedia/format.h	2011-12-28 19:00:46.658119533 +0100
+++ pjsip/sources/pjmedia/include/pjmedia/format.h	2011-12-29 00:02:44.875385800 +0100
@@ -169,6 +169,15 @@
     PJMEDIA_FORMAT_IYUV	    = PJMEDIA_FORMAT_I420,
 
     /**
+     * This is planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved
+     */
+    PJMEDIA_FORMAT_NV12	    = PJMEDIA_FORMAT_PACK('N', 'V', '1', '2'),
+    /**
+     * This is planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved
+     */
+    PJMEDIA_FORMAT_NV21	    = PJMEDIA_FORMAT_PACK('N', 'V', '2', '1'),
+
+    /**
      * This is planar 4:2:2/16bpp YUV format.
      */
     PJMEDIA_FORMAT_YV12	    = PJMEDIA_FORMAT_PACK('Y', 'V', '1', '2'),
Index: pjsip/sources/pjmedia/src/pjmedia/ffmpeg_util.c
===================================================================
--- pjsip.orig/sources/pjmedia/src/pjmedia/ffmpeg_util.c	2011-12-28 19:08:03.288284673 +0100
+++ pjsip/sources/pjmedia/src/pjmedia/ffmpeg_util.c	2011-12-28 23:34:22.578944564 +0100
@@ -50,6 +50,8 @@
     { PJMEDIA_FORMAT_YUY2, PIX_FMT_YUYV422},
     { PJMEDIA_FORMAT_UYVY, PIX_FMT_UYVY422},
     { PJMEDIA_FORMAT_I420, PIX_FMT_YUV420P},
+    { PJMEDIA_FORMAT_NV12, PIX_FMT_NV12},
+    { PJMEDIA_FORMAT_NV21, PIX_FMT_NV21},
     { PJMEDIA_FORMAT_YV12, PIX_FMT_YUV422P},
     { PJMEDIA_FORMAT_I420JPEG, PIX_FMT_YUVJ420P},
     { PJMEDIA_FORMAT_I422JPEG, PIX_FMT_YUVJ422P},
Index: pjsip/sources/pjmedia/src/pjmedia/format.c
===================================================================
--- pjsip.orig/sources/pjmedia/src/pjmedia/format.c	2011-12-28 19:10:09.532910685 +0100
+++ pjsip/sources/pjmedia/src/pjmedia/format.c	2011-12-29 14:58:32.647884305 +0100
@@ -75,6 +75,9 @@
 static pj_status_t apply_planar_420(const pjmedia_video_format_info *fi,
 	                            pjmedia_video_apply_fmt_param *aparam);
 
+static pj_status_t apply_planar_420_sp(const pjmedia_video_format_info *fi,
+                                    pjmedia_video_apply_fmt_param *aparam);
+
 static pj_status_t apply_planar_422(const pjmedia_video_format_info *fi,
 	                            pjmedia_video_apply_fmt_param *aparam);
 
@@ -101,6 +104,8 @@
     {PJMEDIA_FORMAT_UYVY,  "UYVY", PJMEDIA_COLOR_MODEL_YUV, 16, 1, &apply_packed_fmt},
     {PJMEDIA_FORMAT_YVYU,  "YVYU", PJMEDIA_COLOR_MODEL_YUV, 16, 1, &apply_packed_fmt},
     {PJMEDIA_FORMAT_I420,  "I420", PJMEDIA_COLOR_MODEL_YUV, 12, 3, &apply_planar_420},
+    {PJMEDIA_FORMAT_NV12,  "NV12", PJMEDIA_COLOR_MODEL_YUV, 12, 2, &apply_planar_420_sp},
+    {PJMEDIA_FORMAT_NV21,  "NV21", PJMEDIA_COLOR_MODEL_YUV, 12, 2, &apply_planar_420_sp},
     {PJMEDIA_FORMAT_YV12,  "YV12", PJMEDIA_COLOR_MODEL_YUV, 16, 3, &apply_planar_422},
     {PJMEDIA_FORMAT_I420JPEG, "I420JPG", PJMEDIA_COLOR_MODEL_YUV, 12, 3, &apply_planar_420},
     {PJMEDIA_FORMAT_I422JPEG, "I422JPG", PJMEDIA_COLOR_MODEL_YUV, 16, 3, &apply_planar_422},
@@ -211,6 +216,55 @@
     return PJ_SUCCESS;
 }
 
+static pj_status_t apply_planar_420_sp(const pjmedia_video_format_info *fi,
+                                     pjmedia_video_apply_fmt_param *aparam)
+{
+    unsigned i;
+    pj_size_t Y_bytes;
+
+    PJ_UNUSED_ARG(fi);
+    /* Calculate memsize */
+    Y_bytes = (pj_size_t)(aparam->size.w * aparam->size.h);
+    aparam->framebytes = Y_bytes + (Y_bytes >> 1);
+
+    /* From libavutil
+     * Planar
+     * .name = "nv21",
+        .nb_components = 3,
+        .log2_chroma_w = 1,
+        .log2_chroma_h = 1,
+        .comp = {
+            { 0, 0, 1, 0, 7 },         Y
+            { 1, 1, 1, 0, 7 },         V
+            { 1, 1, 2, 0, 7 },         U
+
+
+    max_pixsteps = [1, 2, 0, 0]
+    max_pixstep_comps = [0, 1, 0, 0];
+
+
+     */
+    aparam->strides[0] = aparam->size.w;
+    aparam->strides[1] = aparam->size.w >> 1; // ffmpeg considers the size of one of U/V
+
+    aparam->planes[0] = aparam->buffer;
+    aparam->plane_bytes[0] = aparam->strides[0] * aparam->size.h; //Y_bytes;
+
+    aparam->planes[1] = aparam->planes[0] + aparam->plane_bytes[0];
+    aparam->plane_bytes[1] = aparam->strides[1] * aparam->size.h;
+
+    /* Zero unused planes */
+    for (i=2; i<PJMEDIA_MAX_VIDEO_PLANES; ++i) {
+        aparam->strides[i] = 0;
+        aparam->planes[i] = NULL;
+        aparam->plane_bytes[i] = 0;
+    }
+
+    return PJ_SUCCESS;
+}
+
+
+
 static pj_status_t apply_planar_422(const pjmedia_video_format_info *fi,
 	                             pjmedia_video_apply_fmt_param *aparam)
 {
