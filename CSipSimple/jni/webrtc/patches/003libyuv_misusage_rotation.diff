Index: webrtc/sources/modules/video_capture/main/source/video_capture_impl.cc
===================================================================
--- webrtc.orig/sources/modules/video_capture/main/source/video_capture_impl.cc	2012-04-01 12:47:59.140876941 +0200
+++ webrtc/sources/modules/video_capture/main/source/video_capture_impl.cc	2012-04-01 16:17:33.307102233 +0200
@@ -11,6 +11,7 @@
 #include "video_capture_impl.h"
 
 #include "common_video/libyuv/include/libyuv.h"
+#include "common_video/libyuv/include/scaler.h"
 #include "critical_section_wrapper.h"
 #include "module_common_types.h"
 #include "ref_count.h"
@@ -291,6 +292,29 @@
         memset(_captureFrame.Buffer(), 0, _captureFrame.Size());
         // Keeping stride = width for I420 destination.
         int dstStride  = width;
+
+        // Libyuv doesn't crop or scale in convert method
+        // So width/height of target frame has to be correct regarding expected rotation mode
+        // see discution here http://code.google.com/p/libyuv/issues/detail?id=18
+        WebRtc_UWord8* targetBuf =  _captureFrame.Buffer();
+        // TODO - tmp frame recreation should be avoided at each loop
+        // But I want minimum impact of webrtc code for now --
+        // to be reviewed when integrated to webrtc code if accepted
+        VideoFrame tmpFrame;
+        if(_rotateFrame == kRotate90 || _rotateFrame == kRotate270){
+        	// We need to invert it here
+        	dstStride = height;
+            int tmpRequiredLength = CalcBufferSize(kI420, height, width);
+        	tmpFrame.VerifyAndAllocate(tmpRequiredLength);
+			if (!tmpFrame.Buffer())
+			{
+				WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, _id,
+						   "Failed to allocate frame buffer.");
+				return -1;
+			}
+			targetBuf = tmpFrame.Buffer();
+        }
+
         const int conversionResult = ConvertToI420(commonVideoType,
                                                    videoFrame,
                                                    0, 0,  // No cropping
@@ -298,7 +322,7 @@
                                                    videoFrameLength,
                                                    width, height, dstStride,
                                                    _rotateFrame,
-                                                   _captureFrame.Buffer());
+                                                   targetBuf);
         if (conversionResult < 0)
         {
             WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, _id,
@@ -306,6 +330,30 @@
                        frameInfo.rawType);
             return -1;
         }
+
+        // Finalize rotation with a scale to display proper image
+        if(_rotateFrame == kRotate90 || _rotateFrame == kRotate270){
+        	// TODO : this should maybe instanciated only once too
+        	Scaler scaler;
+        	int retVal = 0;
+        	retVal = scaler.Set(height, width,
+        	                       width, height, kI420, kI420, kScaleBox);
+        	if (retVal < 0)
+			{
+				WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, _id,
+						   "Failed to init scaler of I420 frame for rotation constraint");
+				return -1;
+			}
+        	retVal = scaler.Scale(tmpFrame.Buffer(), _captureFrame.Buffer(), requiredLength);
+        	if (retVal < 0)
+			{
+				WEBRTC_TRACE(webrtc::kTraceError, webrtc::kTraceVideoCapture, _id,
+						   "Failed to scale I420 frame due to rotation constraint");
+				return -1;
+			}
+        }
+
+
         _captureFrame.SetLength(requiredLength);
     }
     else // Encoded format
