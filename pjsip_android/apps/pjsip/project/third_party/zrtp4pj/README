General

This file contains the sources and build files to create the GNU ZRTP
modules for pjproject's ZRTP support. In additon this file also contains
a SRTP implementation that support different key lengths. The distribution
also contains all files to build the GNU ZRTP library, thus no special 
download is necessary.

The directory structure and the build process follows the well known and
established process of pjproject's third_party build process. 

The structure is:

build/zsrtp/             # contains the Makefile
zsrtp/                   # Contains transport_zrtp
|-- crypto               # crypto modules that use
|   |-- gcrypt           # gcrypt as backend (not yet supported)
|   `-- openssl          # openssl as backend
|-- include
|   |-- crypto           # *.h files for SRTP crypto
|   `-- libzrtpcpp       # *.h files for GNU ZRTP core library
|       `-- crypto       # *.h files for ZRTP crypto
|-- srtp                 # SRTP source
`-- zrtp                 # GNU ZRTP sources


Building

The only prerequisits the build ZRTP for PJ are:
- openSSL development environment
- a C and C++ compiler (tested with gcc and g++)
- installed and build pjproject - currently tested with 1.8.5

Copy the ZSRTP4PJ.tar to your pjproject's third_party directory, for example:

   cp ZSRTP4PJ.tar ~/development/pjproject-1.8.5/third_party

Unpack the tar file:
   cd ~/development/pjproject-1.8.5/third_party
   tar xvf ZSRTP4PJ.tar

This unpacks all files into their correct places. Before you can build the
project you need to adjust a path setting in the Makefile. Change to the 
correct build directory and open the Makefile file with your preferred text
edito. Adjust the setting of the variable PJDIR to your environment. Store
the makefile and run make dep and make.

   cd build/zsrtp
   make dep
   make

If make does not report errors (some warnings are displayed) the build was 
successful and the static library was copied to 

~/development/pjproject-1.8.5/third_party/lib

Now the ZRTP for PJ is ready to use.


Building an application

Create a makefile that contains follows the known pjproject pattern for
makefiles. The following annotated example shows the important parts:

#Modify this to point to your pjproject location.
PJBASE = ~/development/pjproject-1.8.5

# include pjproject's standard build.mak
include $(PJBASE)/build.mak

# include the ZRTP specific build.mak. The ZRTP build process creates
# this build.mak. It modifies some variable to include the ZRTP library
# and the include path
include $(PJBASE)/third_party/build/zsrtp/build.mak

# Make sure to the the C++ compiler as defined by $(PJ_CXX). This is
# necessary because GNU ZRTP uses C++
CC      = $(PJ_CXX)
LDFLAGS = $(PJ_LDFLAGS)
LDLIBS  = $(PJ_LDLIBS)
CFLAGS  = $(PJ_CFLAGS)
CPPFLAGS= ${CFLAGS}

# Here we create a modified version of pjproject's streamutil.
all:  streamutilzrtp

streamutilzrtp: streamutilzrtp.c
    $(CC) -o $@ $< \
    $(CPPFLAGS) \
    $(LDFLAGS) \
    $(LDLIBS)

clean:
    rm -f streamutilzrtp streamutilzrtp.o


run make to create the application
